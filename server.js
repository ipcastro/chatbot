// Importa√ß√µes necess√°rias
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const axios = require('axios');
const path = require('path');

// Configura√ß√£o do servidor Express
const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// Inicializa√ß√£o da API Gemini
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const modelName = 'gemini-1.5-pro';

// Fun√ß√£o CORRIGIDA para obter a hora atual - Agora garantindo o fuso hor√°rio brasileiro
function getCurrentTime() {
  console.log("‚è∞ Executando getCurrentTime - Vers√£o corrigida");
  
  // Criar nova data e for√ßar o timezone para Brasil/S√£o Paulo
  const now = new Date();
  
  // Ajustando para hor√°rio de Bras√≠lia (GMT-3)
  const brasiliaOffset = -3 * 60; // offset em minutos
  const utcOffset = now.getTimezoneOffset(); // offset local em minutos
  const totalOffsetMinutes = brasiliaOffset - utcOffset;
  
  // Criar nova data ajustada
  const brasiliaTime = new Date(now.getTime() + totalOffsetMinutes * 60000);
  
  // Log detalhado para debug
  console.log("Data original:", now);
  console.log("Data ajustada para Bras√≠lia:", brasiliaTime);
  
  // Extrair componentes da data/hora
  const hours = brasiliaTime.getHours();
  const minutes = brasiliaTime.getMinutes();
  const seconds = brasiliaTime.getSeconds();
  const day = brasiliaTime.getDate();
  const month = brasiliaTime.getMonth() + 1; // getMonth retorna 0-11
  const year = brasiliaTime.getFullYear();
  
  // Nomes dos dias da semana em portugu√™s
  const diasSemana = [
    "domingo", "segunda-feira", "ter√ßa-feira", 
    "quarta-feira", "quinta-feira", "sexta-feira", "s√°bado"
  ];
  
  // Nomes dos meses em portugu√™s
  const nomesMeses = [
    "janeiro", "fevereiro", "mar√ßo", "abril",
    "maio", "junho", "julho", "agosto", 
    "setembro", "outubro", "novembro", "dezembro"
  ];
  
  const dayOfWeek = diasSemana[brasiliaTime.getDay()];
  const monthName = nomesMeses[brasiliaTime.getMonth()];
  
  // Formata√ß√£o manual para garantir precis√£o
  const formattedDateTime = `${dayOfWeek}, ${day} de ${monthName} de ${year}, ${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
  
  console.log("Hor√°rio formatado:", formattedDateTime);
  
  return { 
    currentTime: formattedDateTime,
    dayOfWeek: dayOfWeek,
    dayOfMonth: day,
    month: monthName,
    year: year,
    hours: hours,
    minutes: minutes,
    seconds: seconds,
    isDay: hours >= 6 && hours < 18,
    timestamp: brasiliaTime.getTime()
  };
}

async function getWeather(args) {
  console.log("Executando getWeather com args:", args);
  const location = args.location;
  const apiKey = process.env.OPENWEATHER_API_KEY;
  
  if (!apiKey) {
    throw new Error("Chave da API OpenWeatherMap n√£o configurada.");
  }
  
  const url = `https://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${apiKey}&units=metric&lang=pt_br`;
  
  try {
    const response = await axios.get(url);
    return {
      location: response.data.name,
      temperature: response.data.main.temp,
      description: response.data.weather[0].description,
      humidity: response.data.main.humidity,
      windSpeed: response.data.wind.speed
    };
  } catch (error) {
    console.error("Erro ao chamar OpenWeatherMap:", error.response?.data || error.message);
    return { 
      error: error.response?.data?.message || "N√£o foi poss√≠vel obter o tempo para esta localiza√ß√£o." 
    };
  }
}

async function searchSong(args) {
  console.log("Executando searchSong com args:", args);
  const { title, artist } = args;
  const apiKey = process.env.LASTFM_API_KEY;
  
  if (!apiKey) {
    throw new Error("Chave da API Last.fm n√£o configurada.");
  }
  
  const url = `https://ws.audioscrobbler.com/2.0/?method=track.search&track=${title}${artist ? '&artist=' + artist : ''}&api_key=${apiKey}&format=json&limit=5`;
  
  try {
    const response = await axios.get(url);
    const tracks = response.data.results.trackmatches.track;
    
    if (!tracks || tracks.length === 0) {
      return { error: "Nenhuma m√∫sica encontrada com esses crit√©rios." };
    }
    
    return {
      results: tracks.map(track => ({
        title: track.name,
        artist: track.artist,
        url: track.url
      }))
    };
  } catch (error) {
    console.error("Erro ao pesquisar m√∫sica:", error.response?.data || error.message);
    return { error: "N√£o foi poss√≠vel realizar a pesquisa de m√∫sica." };
  }
}

// Mapeamento de nomes de fun√ß√µes para as fun√ß√µes reais
const availableFunctions = {
  getCurrentTime,
  getWeather,
  searchSong
};

// Defini√ß√£o das fun√ß√µes para o modelo
const functionDefinitions = [
  {
    name: "getCurrentTime",
    description: "Retorna a hora e data atuais no Brasil, com informa√ß√µes detalhadas sobre o dia, m√™s, ano e hor√°rio",
    parameters: {
      type: "object",
      properties: {},
      required: []
    }
  },
  {
    name: "getWeather",
    description: "Obt√©m informa√ß√µes meteorol√≥gicas para uma localiza√ß√£o espec√≠fica",
    parameters: {
      type: "object",
      properties: {
        location: {
          type: "string",
          description: "Nome da cidade para obter o clima (ex: S√£o Paulo, Rio de Janeiro)"
        }
      },
      required: ["location"]
    }
  },
  {
    name: "searchSong",
    description: "Pesquisa informa√ß√µes sobre uma m√∫sica pelo t√≠tulo e/ou artista",
    parameters: {
      type: "object",
      properties: {
        title: {
          type: "string",
          description: "T√≠tulo da m√∫sica a ser pesquisada"
        },
        artist: {
          type: "string",
          description: "Nome do artista (opcional)"
        }
      },
      required: ["title"]
    }
  }
];

// Configura√ß√£o do modelo e contexto inicial
const chatContext = `Voc√™ √© o Chatbot Musical, um assistente virtual especializado em m√∫sica. 
Voc√™ deve responder principalmente sobre temas relacionados √† m√∫sica, como:
- Informa√ß√µes sobre artistas, bandas e compositores
- Hist√≥ria e curiosidades musicais
- G√™neros musicais e suas caracter√≠sticas
- Instrumentos musicais e t√©cnicas
- Teoria musical b√°sica
- Recomenda√ß√µes musicais baseadas em prefer√™ncias
- Eventos musicais importantes

Voc√™ tem acesso √†s seguintes fun√ß√µes:
- getCurrentTime: Para informar a hora e data atuais no Brasil
- getWeather: Para verificar o clima em uma cidade (pode relacionar com m√∫sicas sobre o clima)
- searchSong: Para buscar informa√ß√µes sobre m√∫sicas espec√≠ficas

REGRAS IMPORTANTES:
1. Quando o usu√°rio perguntar sobre a hora atual, data atual, ou fazer perguntas como "que horas s√£o?", "que dia √© hoje?", "qual √© a data de hoje?", "que horas s√£o agora?", "me diga as horas", "data de hoje", ou algo similar, SEMPRE use a fun√ß√£o getCurrentTime e forne√ßa uma resposta completa que inclua o dia da semana, data e hor√°rio.

2. Depois de informar a hora/data, voc√™ pode fazer uma conex√£o com alguma curiosidade musical relacionada ao per√≠odo do dia (manh√£, tarde, noite) ou ao dia da semana, se apropriado.

3. Seja amig√°vel e entusiasmado sobre m√∫sica!

4. Use emojis musicais ocasionalmente (üéµ, üé∏, üéπ, üé∑, ü•Å, etc.)

5. Quando n√£o souber uma resposta, seja honesto e sugira outro tema musical

6. Para enriquecer a conversa, use suas fun√ß√µes quando relevante

7. √â OBRIGAT√ìRIO usar a fun√ß√£o getCurrentTime sempre que o usu√°rio perguntar sobre hor√°rio ou data atual, n√£o tente gerar essa informa√ß√£o por conta pr√≥pria!
Al√©m disso, voc√™ pode usar ferramentas especiais:
‚Ä¢ Quando o usu√°rio perguntar sobre a data ou hora atual (ex: "que dia √© hoje?", "que horas s√£o?"), use a ferramenta getCurrentTime para obter informa√ß√µes precisas e atualizadas de data e hora.
‚Ä¢ Quando o usu√°rio perguntar sobre o clima ou tempo meteorol√≥gico em alguma cidade (ex: "como est√° o tempo em Curitiba?"), use a ferramenta getWeather para buscar informa√ß√µes atuais.

Utilize essas ferramentas sempre que necess√°rio para responder de forma precisa √†s perguntas do usu√°rio, especialmente quando se tratarem de informa√ß√µes em tempo real como data, hora ou clima.

Aja com precis√£o, profundidade e did√°tica. Voc√™ √© um guia completo no universo da F√≠sica.
A data atual √© ${getCurrentTime()}, utilize em caso¬†de¬†precis√£o

Quando o usu√°rio digitar "ajuda", sugira temas sobre os quais voc√™ pode conversar.`;
function getCurrentTime (){
    const date = Date;
    return date;
}
const tools = [
    {
      functionDeclarations: [
        {
          name: "getCurrentTime",
          description: "Obt√©m a data e hora atuais.",
          parameters: { type: "object", properties: {} } // Sem par√¢metros necess√°rios
        },
        // Adicione outras declara√ß√µes de fun√ß√£o aqui depois (se desejar adicionar mais fun√ß√µes no futuro)
      ]
    }
  ];
  


// Rota para verificar se fun√ß√µes est√£o funcionando corretamente
app.get('/check-time', async (req, res) => {
  try {
    const timeData = getCurrentTime();
    res.json({ success: true, data: timeData });
  } catch (error) {
    res.json({ success: false, error: error.message });
  }
});

// Rota para servir o frontend
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Rota para processar mensagens do chat
app.post('/chat', async (req, res) => {
  try {
    const { message, history } = req.body;
    console.log("Mensagem do usu√°rio:", message);
    
    // Verificar diretamente se √© uma pergunta sobre hora/data
    const timeQuestions = [
      "que horas s√£o", "horas", "hor√°rio", "que dia √© hoje", "data", 
      "dia de hoje", "data atual", "dia atual", "hora atual", "data de hoje", 
      "hora agora", "que horas", "hora exata", "me diga as horas", 
      "pode me dizer que horas s√£o", "diga a hora"
    ];
    
    // Checar se a mensagem cont√©m perguntas sobre hora/data
    const isTimeQuestion = timeQuestions.some(q => 
      message.toLowerCase().includes(q.toLowerCase()));
    
    // Inicializar modelo com contexto e hist√≥rico
    const model = genAI.getGenerativeModel({
      model: modelName,
      tools: functionDefinitions
    });
    
    const chat = model.startChat({
      history: history || [],
      generationConfig: {
        temperature: 0.8,
        maxOutputTokens: 1024,
      },
      systemInstruction: chatContext,
    });
    
    // Enviar mensagem do usu√°rio
    let response = await chat.sendMessage(message);
    let responseText = '';
    
    // Verificar se a resposta inclui chamadas de fun√ß√£o
    while (response.functionCalls() && response.functionCalls().length > 0) {
      const functionCall = response.functionCalls()[0];
      console.log(`Chamada de fun√ß√£o detectada: ${functionCall.name}`);
      
      if (availableFunctions[functionCall.name]) {
        try {
          // Executar a fun√ß√£o
          const functionArgs = functionCall.args;
          const functionToCall = availableFunctions[functionCall.name];
          const functionResult = await functionToCall(functionArgs);
          
          console.log(`Resultado da fun√ß√£o ${functionCall.name}:`, functionResult);
          
          // Enviar o resultado de volta para o modelo
          response = await chat.sendMessage([{
            functionResponse: {
              name: functionCall.name,
              response: functionResult
            }
          }]);
        } catch (error) {
          console.error(`Erro ao executar fun√ß√£o ${functionCall.name}:`, error);
          
          // Informar o erro ao modelo
          response = await chat.sendMessage([{
            functionResponse: {
              name: functionCall.name,
              response: { error: error.message }
            }
          }]);
        }
      } else {
        console.error(`Fun√ß√£o ${functionCall.name} n√£o implementada`);
        
        // Informar ao modelo que a fun√ß√£o n√£o est√° dispon√≠vel
        response = await chat.sendMessage([{
          functionResponse: {
            name: functionCall.name,
            response: { error: "Fun√ß√£o n√£o implementada" }
          }
        }]);
      }
    }
    
    // Extrair texto final da resposta
    responseText = response.text();
    
    // Obter hist√≥rico atualizado
    const updatedHistory = chat.getHistory();
    
    // Enviar resposta ao cliente
    res.json({
      response: responseText,
      history: updatedHistory
    });
    
  } catch (error) {
    console.error("Erro no processamento do chat:", error);
    res.status(500).json({
      response: "Desculpe, ocorreu um erro ao processar sua mensagem. Por favor, tente novamente.",
      error: error.message
    });
  }
});

// Iniciar o servidor
app.listen(PORT, () => {
  console.log(`Servidor rodando na porta ${PORT}`);
  console.log(`Acess√≠vel em: http://localhost:${PORT}`);
});