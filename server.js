// Importa√ß√µes necess√°rias
const express = require('express');
const cors = require('cors');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const axios = require('axios');
const path = require('path');
const mongoose = require('mongoose');
require('dotenv').config();

// Importar os modelos
const SessaoChat = require('./models/SessaoChat');
const Log = require('./models/Log');

// Configura√ß√£o do servidor Express
const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json());

// Servir arquivos est√°ticos
app.use(express.static(path.join(__dirname, 'public')));

// Rota principal
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Conex√£o com MongoDB usando Mongoose
mongoose.connect(process.env.MONGO_HISTORIA)
    .then(() => {
        console.log('Conectado ao MongoDB via Mongoose');
        
        // Iniciar o servidor apenas ap√≥s conectar ao banco
        app.listen(PORT, () => {
            console.log(`Servidor rodando na porta ${PORT}`);
            //console.log(`Acesse http://localhost:${PORT} no seu navegador`);
        });
    })
    .catch((err) => {
        console.error('Erro ao conectar ao MongoDB:', err);
        process.exit(1); // Encerra o processo se n√£o conseguir conectar ao banco
    });

let dadosRankingVitrine = [];

app.post('/chat', async (req, res) => {
  try {
    const { message, history = [] } = req.body;
    console.log("\n--- Nova Mensagem ---");
    console.log("Mensagem do usu√°rio:", message);

    // Detecta perguntas sobre data/hora e responde direto do servidor
    const msgLower = message.trim().toLowerCase();
    
    // Palavras-chave em portugu√™s para data/hora
    const palavrasDataHoraPT = [
      "que horas s√£o", "qual a hora", "me diga a hora", "me diga as horas",
      "que dia √© hoje", "qual a data", "data de hoje", "hora atual", "data atual",
      "horas", "hor√°rio", "dia de hoje", "dia atual", "hora agora", "que horas",
      "hora exata", "me diga as horas", "pode me dizer que horas s√£o", "diga a hora",
      "que data e hora", "data e hora", "hora e data", "que dia e hora", "dia e hora",
      "hora e dia", "me diga a data e hora", "me diga a hora e data", "me diga o dia e hora",
      "me diga a hora e dia", "me diga o hor√°rio", "me diga o dia", "me diga a data"
    ];

    // Palavras-chave em ingl√™s para data/hora
    const palavrasDataHoraEN = [
      "what time", "what's the time", "tell me the time",
      "what day", "what's the date", "tell me the date",
      "current time", "current date", "what time is it",
      "what day is it", "what's today", "what's the current time"
    ];

    // Palavras-chave para clima
    const palavrasClima = [
      "clima", "tempo", "previs√£o", "temperatura", "chuva",
      "weather", "forecast", "temperature", "rain", "frio",
      "calor", "umidade", "vento", "nublado", "ensolarado"
    ];

    // Verifica se √© uma pergunta sobre clima
    const isClimaQuestion = palavrasClima.some(palavra => msgLower.includes(palavra));

    // Se for pergunta sobre clima, responde diretamente
    if (isClimaQuestion) {
      // Extrai o nome da cidade da mensagem
      const cidadeMatch = msgLower.match(/(?:clima|tempo|previs√£o|weather|forecast)(?:\s+de|\s+em|\s+para)?\s+([^,.!?]+)/i);
      const cidade = cidadeMatch ? cidadeMatch[1].trim() : null;

      if (!cidade) {
        return res.json({
          response: "Me diga qual cidade voc√™ quer saber o clima, meu amor! üíï",
          history: history
        });
      }

      try {
        const weatherData = await getWeather({ location: cidade });
        
        if (weatherData.error) {
          return res.json({
            response: weatherData.error,
            history: history
          });
        }

        // Formata a resposta de forma amig√°vel
        let response = `Em ${weatherData.location} agora est√°:\n\n`;
        response += `üå°Ô∏è Temperatura: ${weatherData.temperature}¬∞C\n`;
        response += `üå§Ô∏è ${weatherData.description.charAt(0).toUpperCase() + weatherData.description.slice(1)}\n`;
        response += `üí® Vento: ${weatherData.windSpeed} km/h\n`;
        response += `üíß Umidade: ${weatherData.humidity}%\n`;
        
        if (weatherData.feelsLike !== weatherData.temperature) {
          response += `üå°Ô∏è Sensa√ß√£o t√©rmica: ${weatherData.feelsLike}¬∞C\n`;
        }

        // Sugere uma m√∫sica baseada no clima
        response += "\nQue tal ouvirmos uma m√∫sica que combine com esse clima? üéµ Posso te ajudar a encontrar uma m√∫sica espec√≠fica ou explorar um g√™nero que voc√™ goste!";
        
        return res.json({
          response: response,
          history: history
        });
      } catch (error) {
        console.error("Erro ao obter clima:", error);
        return res.json({
          response: "Desculpe, meu amor! üíï N√£o consegui verificar o clima agora. Pode tentar novamente em alguns instantes?",
          history: history
        });
      }
    }

    // Verifica se √© uma pergunta sobre data/hora
    const isDataHoraQuestion = palavrasDataHoraPT.some(q => msgLower.includes(q)) ||
                             palavrasDataHoraEN.some(q => msgLower.includes(q));

    // Verifica se a mensagem √© uma pergunta
    const isQuestion = msgLower.includes("?") || 
                      msgLower.startsWith("what") || 
                      msgLower.startsWith("que") || 
                      msgLower.startsWith("qual") ||
                      msgLower.startsWith("me diga") ||
                      msgLower.startsWith("tell me");

    // Verifica se a mensagem cont√©m men√ß√£o a getCurrentTime ou aguardando execu√ß√£o
    const contemMencaoGetCurrentTime = msgLower.includes("getcurrenttime") || 
                                     msgLower.includes("aguardando execu√ß√£o") ||
                                     msgLower.includes("awaiting execution");

    if ((isDataHoraQuestion && isQuestion) || contemMencaoGetCurrentTime) {
      const timeData = getCurrentTime();
      const isDataQuestion = msgLower.includes("dia") || msgLower.includes("data") || 
                           msgLower.includes("date") || msgLower.includes("day");
      const isHoraQuestion = msgLower.includes("hora") || msgLower.includes("hor√°rio") || 
                           msgLower.includes("time") || msgLower.includes("hour");
      
      let response = "";
      if (isDataQuestion && isHoraQuestion) {
        response = `Ol√°! üòä\n\nAgora s√£o:\n${timeData.currentTime} üïí`;
      } else if (isDataQuestion) {
        response = `Ol√°! üòä\n\nHoje √©:\n${timeData.dayOfWeek}, ${timeData.dayOfMonth} de ${timeData.month} de ${timeData.year} üìÖ`;
      } else {
        response = `Ol√°! üòä\n\nAgora s√£o:\n${timeData.hours}:${timeData.minutes.toString().padStart(2, '0')}:${timeData.seconds.toString().padStart(2, '0')} üïí`;
      }
      
      // Adiciona uma resposta mais amig√°vel e musical com mais espa√ßamento
      response += "\n\n--------------------\n\nQue tal ouvirmos uma m√∫sica para celebrar esse momento? üéµ\nPosso te ajudar a encontrar uma m√∫sica espec√≠fica ou explorar um g√™nero que voc√™ goste! üé∏";
      
      return res.json({
        response: response,
        history: history
      });
    }

    const model = genAI.getGenerativeModel({
      model: modelName,
      tools: [{
        functionDeclarations: functionDeclarations
      }],
      generation_config: { 
        temperature: 0.7,
        top_p: 0.8,
        top_k: 40
      },
    });

    // For√ßa o modelo a responder em portugu√™s
    const languageInstruction = {
      role: 'user',
      parts: [{ text: 'Voc√™ DEVE responder SEMPRE em portugu√™s do Brasil, de forma amig√°vel e informal, como se estivesse conversando com um amigo.' }]
    };

    // Inicializa o chat sem hist√≥rico primeiro
    const chat = model.startChat({
      generationConfig: {
        temperature: 0.7,
        top_p: 0.8,
        top_k: 40
      },
    });

    // Adiciona cada mensagem do hist√≥rico sequencialmente
    if (history && history.length > 0) {
      for (const msg of history) {
        try {
          const text = typeof msg === 'string' ? msg :
                      msg.message || msg.text ||
                      (msg.parts && msg.parts[0] && msg.parts[0].text) ||
                      JSON.stringify(msg);
          
          await chat.sendMessage(text);
        } catch (historyError) {
          console.error("Erro ao processar mensagem do hist√≥rico:", historyError);
          // Continua mesmo se houver erro em uma mensagem do hist√≥rico
        }
      }
    }

    let currentApiRequestContents = message;
    let modelResponse;
    let loopCount = 0;
    const MAX_FUNCTION_CALL_LOOPS = 5;

    while (loopCount < MAX_FUNCTION_CALL_LOOPS) {
      loopCount++;
      console.log(`[CHAT_LOOP ${loopCount}] Enviando para o modelo. Tipo do input: ${typeof currentApiRequestContents}`);

      let result;
      try {
        result = await chat.sendMessage(currentApiRequestContents);
      } catch (sdkError) {
        console.error(`[SDK_ERROR] Erro ao chamar chat.sendMessage na itera√ß√£o ${loopCount}:`, sdkError);
        console.error("[SDK_ERROR] Stack:", sdkError.stack);
        const errorResponseText = sdkError.message || "Ocorreu um erro ao comunicar com a IA.";
        const currentHistory = await chat.getHistory();
        return res.status(500).json({ response: errorResponseText, history: currentHistory, error: "SDK Error" });
      }
      
      if (!result || !result.response) {
        console.error(`[PANIC_RESPONSE] result ou result.response est√° undefined/null ap√≥s sendMessage na itera√ß√£o ${loopCount}.`);
        console.error("[PANIC_RESPONSE] Conte√∫do de result:", JSON.stringify(result, null, 2));
        const historySoFar = await chat.getHistory();
        return res.status(500).json({ response: "Erro cr√≠tico: A IA n√£o retornou uma resposta v√°lida.", history: historySoFar, error: "Invalid AI Response" });
      }

      modelResponse = result.response;
      
      // Verifica se a resposta do modelo cont√©m men√ß√£o a getCurrentTime
      let responseText = "";
      if (modelResponse && typeof modelResponse.text === 'function') {
        responseText = modelResponse.text();
      } else if (modelResponse && modelResponse.candidates && modelResponse.candidates[0]?.content?.parts) {
        responseText = modelResponse.candidates[0].content.parts
          .filter(part => part.text)
          .map(part => part.text)
          .join("");
      }

      // Se a resposta cont√©m men√ß√£o a getCurrentTime, substitui pela data/hora atual
      if (responseText.toLowerCase().includes("getcurrenttime") || 
          responseText.toLowerCase().includes("aguardando execu√ß√£o") ||
          responseText.toLowerCase().includes("awaiting execution")) {
        const timeData = getCurrentTime();
        responseText = `Agora s√£o ${timeData.currentTime} üïí\n\nQue tal ouvirmos uma m√∫sica para celebrar esse momento? üéµ Posso te ajudar a encontrar uma m√∫sica espec√≠fica ou explorar um g√™nero que voc√™ goste!`;
        return res.json({
          response: responseText,
          history: history
        });
      }

      // Verifica se h√° chamadas de fun√ß√£o na resposta
      const functionCalls = modelResponse.functionCalls?.() || [];
      
      if (!functionCalls || functionCalls.length === 0) {
        console.log(`[CHAT_LOOP ${loopCount}] Nenhuma chamada de fun√ß√£o pendente nesta resposta.`);
        break;
      }

      console.log(`[CHAT_LOOP ${loopCount}] Chamadas de fun√ß√£o requisitadas:`, JSON.stringify(functionCalls, null, 2));

      const functionExecutionResponses = [];
      for (const call of functionCalls) {
        const functionToCall = availableFunctions[call.name];
        if (functionToCall) {
          try {
            console.log(`[FUNC_EXEC] Executando: ${call.name}, Args:`, call.args);
            const functionResultData = await functionToCall(call.args);
            console.log(`[FUNC_EXEC] Resultado de ${call.name}:`, JSON.stringify(functionResultData).substring(0,200) + "...");
            functionExecutionResponses.push({
              functionResponse: { 
                name: call.name, 
                response: functionResultData 
              }
            });
          } catch (funcError) {
            console.error(`[FUNC_ERROR] Erro ao executar ${call.name}:`, funcError);
            functionExecutionResponses.push({
              functionResponse: { 
                name: call.name, 
                response: { error: `Erro interno ao executar ${call.name}: ${funcError.message}` } 
              }
            });
          }
        } else {
          console.error(`[FUNC_ERROR] Fun√ß√£o ${call.name} n√£o implementada.`);
          functionExecutionResponses.push({
            functionResponse: { 
              name: call.name, 
              response: { error: "Fun√ß√£o n√£o implementada no servidor." } 
            }
          });
        }
      }

      if (functionExecutionResponses.length > 0) {
        currentApiRequestContents = functionExecutionResponses;
      } else {
        console.log(`[CHAT_LOOP ${loopCount}] Nenhuma resposta de fun√ß√£o processada, saindo do loop.`);
        break;
      }
    }

    if (loopCount >= MAX_FUNCTION_CALL_LOOPS) {
      console.warn("[CHAT_LOOP_MAX] Loop de chamadas de fun√ß√£o atingiu o limite m√°ximo.");
    }

    let responseText = "";
    if (modelResponse && typeof modelResponse.text === 'function') {
      responseText = modelResponse.text();
    } else if (modelResponse && modelResponse.candidates && modelResponse.candidates[0]?.content?.parts) {
      responseText = modelResponse.candidates[0].content.parts
        .filter(part => part.text)
        .map(part => part.text)
        .join("");
    } else {
      console.error("[TEXT_EXTRACTION_FAIL] N√£o foi poss√≠vel obter texto final de modelResponse.");
      responseText = "Desculpe, tive um problema ao gerar a resposta final.";
    }

    console.log("[FINAL_RESPONSE] Texto para o usu√°rio:", responseText.substring(0,300) + "...");

    const updatedHistory = await chat.getHistory();

    res.json({
      response: responseText,
      history: updatedHistory,
    });

  } catch (error) {
    console.error("===== ERRO GERAL NA ROTA /chat =====");
    console.error("Mensagem do Erro:", error.message);
    console.error("Stack Trace do Erro:", error.stack);
    
    let errorHistory = req.body.history || [];
    try {
      if (typeof chat !== 'undefined' && chat && typeof chat.getHistory === 'function') {
        errorHistory = await chat.getHistory();
      }
    } catch (historyError) {
      console.error("Erro ao tentar obter hist√≥rico durante o tratamento de erro:", historyError.message);
    }

    res.status(500).json({
      response: `Desculpe, ocorreu um erro interno no servidor: ${error.message}. Por favor, tente novamente.`,
      history: errorHistory,
      error: error.message || "Erro desconhecido"
    });
  }
});

app.post('/api/log-connection', async (req, res) => {
    try {
        const { ip, acao } = req.body;
        const nomeBot = "IFCODE SuperBot"; // Troque para o nome do seu bot!

        if (!ip || !acao) {
            return res.status(400).json({ error: "Dados de log incompletos (IP e a√ß√£o s√£o obrigat√≥rios)." });
        }

        const agora = new Date();
        const dataFormatada = agora.toISOString().split('T')[0]; // YYYY-MM-DD
        const horaFormatada = agora.toTimeString().split(' ')[0]; // HH:MM:SS

        await Log.create({
            col_data: dataFormatada,
            col_hora: horaFormatada,
            col_IP: ip,
            col_nome_bot: nomeBot,
            col_acao: acao
        });

        res.status(201).json({ message: "Log registrado com sucesso." });
    } catch (error) {
        console.error("[Servidor] Erro ao registrar log:", error);
        res.status(500).json({ error: "Erro ao registrar log." });
    }
});

app.post('/api/ranking/registrar-acesso-bot', (req, res) => {
    const { botId, nomeBot, timestampAcesso, usuarioId } = req.body;

    if (!botId || !nomeBot) {
        return res.status(400).json({ error: "ID e Nome do Bot s√£o obrigat√≥rios para o ranking." });
    }

    const acesso = {
        botId,
        nomeBot,
        usuarioId: usuarioId || 'anonimo',
        acessoEm: timestampAcesso ? new Date(timestampAcesso) : new Date(),
        contagem: 1
    };

    const botExistente = dadosRankingVitrine.find(b => b.botId === botId);
    if (botExistente) {
        botExistente.contagem += 1;
        botExistente.ultimoAcesso = acesso.acessoEm;
    } else {
        dadosRankingVitrine.push({
            botId: botId,
            nomeBot: nomeBot,
            contagem: 1,
            ultimoAcesso: acesso.acessoEm
        });
    }

    console.log('[Servidor] Dados de ranking atualizados:', dadosRankingVitrine);
    res.status(201).json({ message: `Acesso ao bot ${nomeBot} registrado para ranking.` });
});

app.get('/api/ranking/visualizar', (req, res) => {
    // Ordena do maior para o menor
    const rankingOrdenado = [...dadosRankingVitrine].sort((a, b) => b.contagem - a.contagem);
    res.json(rankingOrdenado);
});

// Inicializa√ß√£o da API Gemini
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
// Troque para um modelo suportado pela sua conta/projeto:
const modelName = 'gemini-1.5-flash';

// Fun√ß√£o para obter a hora atual - Garantindo o fuso hor√°rio brasileiro
function getCurrentTime() {
  console.log("‚è∞ Executando getCurrentTime");
  const now = new Date();
  const brasiliaTime = new Date(now.toLocaleString("en-US", { timeZone: "America/Sao_Paulo" }));

  const hours = brasiliaTime.getHours();
  const minutes = brasiliaTime.getMinutes();
  const seconds = brasiliaTime.getSeconds();
  const day = brasiliaTime.getDate();
  const month = brasiliaTime.getMonth();
  const year = brasiliaTime.getFullYear();

  const diasSemana = ["domingo", "segunda-feira", "ter√ßa-feira", "quarta-feira", "quinta-feira", "sexta-feira", "s√°bado"];
  const nomesMeses = ["janeiro", "fevereiro", "mar√ßo", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro"];

  const dayOfWeek = diasSemana[brasiliaTime.getDay()];
  const monthName = nomesMeses[month];

  // Formata a hora com zeros √† esquerda quando necess√°rio
  const formattedHours = hours.toString().padStart(2, '0');
  const formattedMinutes = minutes.toString().padStart(2, '0');
  const formattedSeconds = seconds.toString().padStart(2, '0');

  const formattedDateTime = `${dayOfWeek}, ${day} de ${monthName} de ${year}, ${formattedHours}:${formattedMinutes}:${formattedSeconds}`;

  return {
    currentTime: formattedDateTime,
    dayOfWeek: dayOfWeek,
    dayOfMonth: day,
    month: monthName,
    year: year,
    hours: hours,
    minutes: minutes,
    seconds: seconds,
    isDay: hours >= 6 && hours < 18,
    timestamp: brasiliaTime.getTime()
  };
}

async function getWeather(args) {
  console.log("Executando getWeather com args:", args);
  const location = args.location;
  const apiKey = process.env.OPENWEATHER_API_KEY;

  if (!apiKey) {
    console.error("Chave da API OpenWeatherMap n√£o configurada.");
    return { error: "Desculpe, n√£o consigo verificar o clima no momento. Tente novamente mais tarde." };
  }
  if (!location) {
    console.warn("Localiza√ß√£o n√£o fornecida para getWeather. Retornando erro amig√°vel.");
    return { error: "Por favor, me diga qual cidade voc√™ quer saber o clima." };
  }

  const url = `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(location)}&appid=${apiKey}&units=metric&lang=pt_br`;

  try {
    const response = await axios.get(url);
    const data = response.data;
    
    // Formata a resposta de forma mais amig√°vel
    return {
      location: data.name,
      temperature: Math.round(data.main.temp),
      description: data.weather[0].description,
      humidity: data.main.humidity,
      windSpeed: Math.round(data.wind.speed * 3.6), // Converte m/s para km/h
      feelsLike: Math.round(data.main.feels_like),
      icon: data.weather[0].icon
    };
  } catch (error) {
    console.error("Erro ao chamar OpenWeatherMap:", error.response?.data?.message || error.message);
    const errorMessage = error.response?.data?.cod === "404" || error.response?.data?.message === 'city not found'
      ? `N√£o encontrei informa√ß√µes do tempo para "${location}". Pode verificar o nome da cidade?`
      : "N√£o foi poss√≠vel obter o tempo para esta localiza√ß√£o no momento.";
    return {
      error: errorMessage
    };
  }
}

async function searchSong(args) {
  console.log("Executando searchSong com args:", args);
  const { title, artist } = args;
  const apiKey = process.env.LASTFM_API_KEY;

  if (!apiKey) {
    console.error("Chave da API Last.fm n√£o configurada.");
    return { error: "Chave da API Last.fm n√£o configurada no servidor." };
  }
  if (!title) {
    console.warn("T√≠tulo n√£o fornecido para searchSong. Retornando erro amig√°vel.");
    return { error: "Por favor, especifique o t√≠tulo da m√∫sica." };
  }

  const url = `https://ws.audioscrobbler.com/2.0/?method=track.search&track=${encodeURIComponent(title)}${artist ? '&artist=' + encodeURIComponent(artist) : ''}&api_key=${apiKey}&format=json&limit=5`;

  try {
    const response = await axios.get(url);
    const tracks = response.data.results?.trackmatches?.track;

    if (!tracks || (Array.isArray(tracks) && tracks.length === 0) || (typeof tracks === 'object' && !Array.isArray(tracks) && Object.keys(tracks).length === 0) ) {
      return { results: [], message: "Nenhuma m√∫sica encontrada com esses crit√©rios." };
    }
    
    const trackArray = Array.isArray(tracks) ? tracks : [tracks]; // Last.fm pode retornar um objeto se for um s√≥ resultado

    return {
      results: trackArray.map(track => ({
        title: track.name,
        artist: track.artist,
        url: track.url
      })).slice(0, 5) // Garante no m√°ximo 5 resultados
    };
  } catch (error) {
    console.error("Erro ao pesquisar m√∫sica:", error.response?.data || error.message);
    return { error: "N√£o foi poss√≠vel realizar a pesquisa de m√∫sica no momento." };
  }
}

const availableFunctions = {
  getCurrentTime,
  getWeather,
  searchSong
};

const functionDeclarations = [
  {
    name: "getCurrentTime",
    description: "Retorna a hora e data atuais no Brasil (fuso hor√°rio de Bras√≠lia), com informa√ß√µes detalhadas sobre o dia, m√™s, ano e hor√°rio.",
    parameters: { type: "object", properties: {} }
  },
  {
    name: "getWeather",
    description: "Obt√©m informa√ß√µes meteorol√≥gicas para uma localiza√ß√£o espec√≠fica (cidade).",
    parameters: {
      type: "object",
      properties: {
        location: {
          type: "string",
          description: "Nome da cidade para obter o clima (ex: S√£o Paulo, Rio de Janeiro, Curitiba)"
        }
      },
      required: ["location"]
    }
  },
  {
    name: "searchSong",
    description: "Pesquisa informa√ß√µes sobre uma m√∫sica pelo t√≠tulo e, opcionalmente, pelo artista.",
    parameters: {
      type: "object",
      properties: {
        title: {
          type: "string",
          description: "T√≠tulo da m√∫sica a ser pesquisada"
        },
        artist: {
          type: "string",
          description: "Nome do artista (opcional, mas ajuda a refinar a busca)"
        }
      },
      required: ["title"]
    }
  }
];

const systemInstruction = `Voc√™ √© o Chatbot Musical, um assistente virtual brasileiro especializado em m√∫sica.
IMPORTANTE: Voc√™ DEVE SEMPRE responder em portugu√™s do Brasil, usando linguagem informal e amig√°vel.
Voc√™ deve responder principalmente sobre temas relacionados √† m√∫sica, mantendo um tom alegre e acolhedor.
Voc√™ tem acesso √†s seguintes fun√ß√µes:
- getCurrentTime: Para informar a hora e data atuais no Brasil (hor√°rio de Bras√≠lia).
- getWeather: Para verificar o clima em uma cidade (voc√™ pode relacionar com m√∫sicas sobre o clima ou humor).
- searchSong: Para buscar informa√ß√µes sobre m√∫sicas espec√≠ficas.

REGRAS IMPORTANTES:
1. Quando o usu√°rio perguntar sobre a hora atual, data atual, ou fazer perguntas como "que horas s√£o?", "que dia √© hoje?", VOC√ä DEVE SEMPRE usar a fun√ß√£o getCurrentTime. NUNCA responda que n√£o tem acesso a essas informa√ß√µes.
2. NUNCA responda perguntas sobre data ou hora usando seu pr√≥prio conhecimento ou informa√ß√µes antigas. Sempre utilize o resultado da fun√ß√£o getCurrentTime.
3. Se voc√™ responder sobre data/hora sem usar a fun√ß√£o, estar√° ERRADO. Exemplo de resposta ERRADA: "N√£o tenho acesso a informa√ß√µes em tempo real". Exemplo de resposta CERTA: (resultado da fun√ß√£o getCurrentTime).
4. Ap√≥s informar a hora/data, voc√™ pode fazer uma conex√£o com alguma curiosidade musical relacionada.
5. Seja amig√°vel e entusiasmado sobre m√∫sica! Use emojis musicais (üéµ, üé∏, üéπ) quando apropriado.
6. Se n√£o souber uma resposta, seja honesto.
7. Use as fun√ß√µes quando relevante para enriquecer a conversa. √â OBRIGAT√ìRIO usar getCurrentTime para perguntas sobre data/hora.
8. Se o usu√°rio pedir ajuda, sugira temas musicais ou funcionalidades que voc√™ oferece.
9. NUNCA mencione o nome das fun√ß√µes em suas respostas. Apenas use-as e forne√ßa as informa√ß√µes solicitadas de forma natural.
10. Para perguntas sobre clima, use a fun√ß√£o getWeather e responda de forma natural, sem mencionar a fun√ß√£o.`;


// Adiciona instru√ß√µes iniciais
/*formattedHistory.unshift(
  {
    role: 'system',
    parts: [{ text: systemInstruction }]
  },
  {
    role: 'system',
    parts: [{ text: 'Voc√™ DEVE responder SEMPRE em portugu√™s do Brasil, de forma amig√°vel e informal, como se estivesse conversando com um amigo.' }]
  }
)*/

app.get('/check-time', async (req, res) => {
  try {
    const timeData = getCurrentTime();
    res.json({ success: true, data: timeData });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.post('/chat', async (req, res) => {
  try {
    const { message, history = [] } = req.body; // Garante que history seja um array
    console.log("\n--- Nova Mensagem ---");
    // console.log("Hist√≥rico recebido:", JSON.stringify(history, null, 2));
    console.log("Mensagem do usu√°rio:", message);

    const model = genAI.getGenerativeModel({
      model: modelName,
      tools: [{
        functionDeclarations: functionDeclarations
      }],
      generation_config: { temperature: 0.7 },
    });

    // Formata o hist√≥rico para o formato correto
    const formattedHistory = [];
    if (history && history.length > 0) {
      for (const msg of history) {
        try {
          const text = typeof msg === 'string' ? msg : 
                      msg.message || msg.text || 
                      (msg.parts && msg.parts[0] && msg.parts[0].text) || 
                      JSON.stringify(msg);

          formattedHistory.push({
            role: msg.isUser ? 'user' : 'model',
            parts: [{ text }]
          });
        } catch (error) {
          console.error('Erro ao formatar mensagem do hist√≥rico:', error);
        }
      }
    }

    // Adiciona as instru√ß√µes iniciais
    formattedHistory.unshift(
      {
        role: 'assistant',
        parts: [{ text: systemInstruction }]
      },
      languageInstruction // Adiciona a instru√ß√£o de idioma
    );

    console.log('Hist√≥rico formatado:', JSON.stringify(formattedHistory, null, 2));

    // Inicia o chat com o hist√≥rico formatado
    const chat = model.startChat({
      history: formattedHistory,
      generationConfig: { 
        temperature: 0.7,
        topP: 0.8,
        topK: 40
      }
    });
    
    let currentApiRequestContents = message; // Envia a mensagem atual
    let modelResponse; // Para armazenar a resposta do modelo (`GenerateContentResponse`)
    let loopCount = 0;
    const MAX_FUNCTION_CALL_LOOPS = 5;

    while (loopCount < MAX_FUNCTION_CALL_LOOPS) {
      loopCount++;
      console.log(`Loop ${loopCount}, enviando para o modelo (primeira parte):`, JSON.stringify(currentApiRequestContents[0]).substring(0, 200) + "...");

      // `sendMessage` espera um `string` ou `Part[]` ou `GenerateContentRequest`
      // Se `currentApiRequestContents` for um array de `FunctionResponsePart`, est√° correto.
      // Se for a primeira mensagem do usu√°rio, `message` (string) √© usado.
      let result;
      try {
        if (loopCount === 1) {
          // Na primeira itera√ß√£o, envie apenas a mensagem do usu√°rio como string
          result = await chat.sendMessage(message);
        } else {
          // Para as chamadas de fun√ß√£o, converte o array em uma string JSON
          const functionResponseStr = JSON.stringify(currentApiRequestContents);
          result = await chat.sendMessage(functionResponseStr);
        }
      } catch (sendError) {
        console.error(`Erro ao enviar mensagem (loop ${loopCount}):`, sendError);
        throw sendError;
      }
      
      modelResponse = result.response; // `modelResponse` √© `GenerateContentResponse`

      if (!modelResponse) {
          console.error("PANIC: result.response (modelResponse) est√° undefined ou null. Conte√∫do de result:", JSON.stringify(result, null, 2));
          const historySoFar = await chat.getHistory();
          const lastModelPart = historySoFar.filter(h => h.role === 'model').pop();
          const fallbackText = lastModelPart ? lastModelPart.parts.map(p => p.text || "").join('') : "N√£o consegui processar a resposta devido a um erro interno.";
          return res.json({ response: fallbackText, history: historySoFar });
      }
      
      // Log para depura√ß√£o
      // console.log("Conte√∫do de modelResponse (result.response):", JSON.stringify(modelResponse, null, 2));

      // Verifica se functionCalls existe e √© uma fun√ß√£o
      if (typeof modelResponse.functionCalls !== 'function') {
        console.log("modelResponse.functionCalls n√£o √© uma fun√ß√£o. A resposta atual √© provavelmente texto.");
        // console.log("Estrutura de modelResponse para depura√ß√£o:", JSON.stringify(modelResponse, null, 2));
        break; // Sai do loop, pois n√£o h√° (mais) chamadas de fun√ß√£o ou o m√©todo n√£o existe.
      }

      const functionCallRequests = modelResponse.functionCalls(); // Isto retorna FunctionCall[] | undefined

      if (!functionCallRequests || functionCallRequests.length === 0) {
        console.log("Nenhuma chamada de fun√ß√£o pendente nesta resposta.");
        break; // Sai do loop se n√£o houver chamadas de fun√ß√£o
      }

      console.log(`Chamadas de fun√ß√£o requisitadas pelo modelo (${functionCallRequests.length}):`, JSON.stringify(functionCallRequests, null, 2));

      const functionExecutionResponses = [];
      for (const call of functionCallRequests) { // `call` aqui √© um objeto FunctionCall {name, args}
        const functionToCall = availableFunctions[call.name];
        if (functionToCall) {
          try {
            console.log(`Executando fun√ß√£o: ${call.name} com args:`, call.args);
            const functionResultData = await functionToCall(call.args);
            console.log(`Resultado da fun√ß√£o ${call.name}:`, functionResultData);
            functionExecutionResponses.push({ // Esta √© a estrutura de FunctionResponsePart
              functionResponse: {
                name: call.name,
                response: functionResultData,
              },
            });
          } catch (error) {
            console.error(`Erro ao executar fun√ß√£o ${call.name}:`, error);
            functionExecutionResponses.push({
              functionResponse: {
                name: call.name,
                response: { error: `Erro interno ao executar a fun√ß√£o: ${error.message}` },
              },
            });
          }
        } else {
          console.error(`Fun√ß√£o ${call.name} n√£o implementada`);
          functionExecutionResponses.push({
            functionResponse: {
              name: call.name,
              response: { error: "Fun√ß√£o n√£o implementada no servidor." },
            },
          });
        }
      }

      if (functionExecutionResponses.length > 0) {
        console.log("Enviando respostas das fun√ß√µes para o modelo:", JSON.stringify(functionExecutionResponses, null, 2).substring(0,200) + "...");
        currentApiRequestContents = functionExecutionResponses; // Prepara para a pr√≥xima chamada ao sendMessage
      } else {
        console.log("Nenhuma resposta de fun√ß√£o processada (isso n√£o deveria acontecer se functionCallRequests existia), saindo do loop.");
        break;
      }
    } // Fim do while

    if (loopCount >= MAX_FUNCTION_CALL_LOOPS) {
        console.warn("Loop de chamadas de fun√ß√£o atingiu o limite m√°ximo.");
    }

    let responseText = "";
    if (modelResponse && typeof modelResponse.text === 'function') {
        responseText = modelResponse.text();
    } else if (modelResponse && modelResponse.candidates && modelResponse.candidates[0]?.content?.parts) {
        responseText = modelResponse.candidates[0].content.parts.map(part => part.text || "").join("");
    } else {
        console.error("N√£o foi poss√≠vel obter texto final de modelResponse. Estrutura de modelResponse:", JSON.stringify(modelResponse, null, 2));
        responseText = "Desculpe, tive um problema ao gerar a resposta final.";
    }

    console.log("Resposta final do modelo para o usu√°rio:", responseText);

    const updatedHistory = await chat.getHistory();
    // console.log("Hist√≥rico atualizado para enviar ao cliente:", JSON.stringify(updatedHistory, null, 2));

    res.json({
      response: responseText,
      history: updatedHistory,
    });

  } catch (error) {
    console.error("Erro GERAL no processamento do chat:", error);
    console.error("Stack do erro:", error.stack);
    if (error.message && error.message.includes('API key not valid')) {
         res.status(401).json({
            response: "Desculpe, ocorreu um erro de autentica√ß√£o com a API de IA. Verifique a chave da API.",
            error: error.message
        });
    } else if (error.response && error.response.data) { // Erros de Axios ou outras APIs
        res.status(500).json({
            response: "Desculpe, ocorreu um erro ao se comunicar com um servi√ßo externo.",
            error: error.response.data
        });
    }
    else {
        res.status(500).json({
          response: "Desculpe, ocorreu um erro ao processar sua mensagem. Por favor, tente novamente.",
          error: error.message || "Erro desconhecido",
        });
    }
  }
});

async function registrarAcessoBotParaRanking(botId, nomeBot) {
    const dataRanking = {
        botId: botId,
        nomeBot: nomeBot,
        timestampAcesso: new Date().toISOString()
    };
    await fetch('/api/ranking/registrar-acesso-bot', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(dataRanking)
    });
}

app.post('/api/chat/salvar-historico', async (req, res) => {
    try {
        const { sessionId, userId, botId, startTime, endTime, messages } = req.body;

        if (!sessionId || !messages || !Array.isArray(messages)) {
            return res.status(400).json({ error: "Dados incompletos para salvar hist√≥rico (sessionId e messages s√£o obrigat√≥rios)." });
        }

        // Formatar as mensagens para garantir estrutura correta
        const formattedMessages = messages.map(msg => ({
            role: msg.role || (msg.isUser ? 'user' : 'assistant'),
            parts: [{
                text: msg.message || msg.text || msg.parts?.[0]?.text || msg
            }]
        }));

        const novaSessao = new SessaoChat({
            sessionId,
            userId: userId || 'anonimo',
            botId: botId || 'IFCODE SuperBot',
            startTime: startTime ? new Date(startTime) : new Date(),
            endTime: endTime ? new Date(endTime) : new Date(),
            messages: formattedMessages
        });

        await novaSessao.save();

        console.log('[Servidor] Hist√≥rico de sess√£o salvo:', novaSessao._id);
        res.status(201).json({ message: "Hist√≥rico de chat salvo com sucesso!", sessionId: novaSessao.sessionId });

    } catch (error) {
        console.error("[Servidor] Erro em /api/chat/salvar-historico:", error.message);
        res.status(500).json({ error: "Erro interno ao salvar hist√≥rico de chat." });
    }
});

async function salvarHistoricoSessao(sessionId, botId, startTime, endTime, messages) {
    try {
        const backendUrl = 'https://chatbot-dny3.onrender.com';
        
        // Formatar as mensagens para garantir estrutura correta
        const formattedMessages = messages.map(msg => ({
            role: msg.role || (msg.isUser ? 'user' : 'assistant'),
            parts: [{
                text: msg.message || msg.text || msg.parts?.[0]?.text || msg
            }]
        }));

        const payload = {
            sessionId,
            botId,
            startTime: startTime.toISOString(),
            endTime: endTime.toISOString(),
            messages: formattedMessages
        };

        const response = await fetch(`${backendUrl}/api/chat/salvar-historico`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            console.error("Falha ao salvar hist√≥rico:", errorData.error || response.statusText);
        } else {
            const result = await response.json();
            console.log("Hist√≥rico de sess√£o enviado:", result.message);
        }
    } catch (error) {
        console.error("Erro ao enviar hist√≥rico de sess√£o:", error);
    }
}

// Endpoint para excluir uma sess√£o de chat
app.delete('/api/chat/historicos/:id', async (req, res) => {
    try {
        console.log('Tentando excluir documento com ID:', req.params.id);
        const result = await SessaoChat.findByIdAndDelete(req.params.id);
        
        console.log('Resultado da exclus√£o:', result);
        
        if (!result) {
            return res.status(404).json({ error: "Hist√≥rico n√£o encontrado." });
        }
        
        res.json({ message: "Hist√≥rico exclu√≠do com sucesso." });
    } catch (error) {
        console.error("[Servidor] Erro ao excluir hist√≥rico:", error);
        res.status(500).json({ error: "Erro interno ao excluir hist√≥rico de chat." });
    }
});

// Endpoint para gerar t√≠tulo para uma sess√£o
app.post('/api/chat/historicos/:id/gerar-titulo', async (req, res) => {
    try {
        console.log('Tentando gerar t√≠tulo para documento com ID:', req.params.id);
        const sessao = await SessaoChat.findById(req.params.id);
        
        if (!sessao) {
            return res.status(404).json({ error: "Hist√≥rico n√£o encontrado." });
        }

        // Formata o hist√≥rico da conversa para a IA
        const mensagens = [];
        sessao.messages.forEach(msg => {
            if (msg.role === 'user') {
                mensagens.push(`Usu√°rio: ${msg.parts[0].text}`);
            } else if (msg.role === 'model') {
                mensagens.push(`Bot: ${msg.parts[0].text}`);
            }
        });

        const historicoFormatado = mensagens.join("\n");
        console.log('Hist√≥rico formatado:', historicoFormatado);

        // Gera o t√≠tulo usando a API Gemini
        const model = genAI.getGenerativeModel({ model: modelName });
        const prompt = `Com base nesta conversa, sugira um t√≠tulo curto e conciso de no m√°ximo 5 palavras que capture o tema principal do di√°logo:\n\n${historicoFormatado}`;
        
        console.log('Enviando prompt para Gemini:', prompt);
        const result = await model.generateContent(prompt);
        const titulo = result.response.text();
        console.log('T√≠tulo gerado:', titulo);

        res.json({ titulo: titulo.trim() });
    } catch (error) {
        console.error("[Servidor] Erro ao gerar t√≠tulo:", error);
        res.status(500).json({ error: "Erro interno ao gerar t√≠tulo: " + error.message });
    }
});

// Endpoint para atualizar o t√≠tulo de uma sess√£o
app.put('/api/chat/historicos/:id/titulo', async (req, res) => {
    try {
        const { titulo } = req.body;
        if (!titulo) {
            return res.status(400).json({ error: "T√≠tulo n√£o fornecido." });
        }

        const sessao = await SessaoChat.findByIdAndUpdate(
            req.params.id,
            { titulo: titulo },
            { new: true }
        );

        if (!sessao) {
            return res.status(404).json({ error: "Hist√≥rico n√£o encontrado." });
        }

        res.json({ message: "T√≠tulo atualizado com sucesso." });
    } catch (error) {
        console.error("[Servidor] Erro ao atualizar t√≠tulo:", error);
        res.status(500).json({ error: "Erro interno ao atualizar t√≠tulo: " + error.message });
    }
});

app.get('/api/chat/historicos', async (req, res) => {
    try {
        const historicos = await SessaoChat.find({})
            .sort({ startTime: -1 })
            .limit(10)
            .exec();
        
        console.log(`[Servidor] Buscados ${historicos.length} hist√≥ricos de chat`);
        res.json(historicos);
        
    } catch (error) {
        console.error("[Servidor] Erro ao buscar hist√≥ricos:", error);
        res.status(500).json({ error: "Erro interno ao buscar hist√≥ricos de chat." });
    }
});

// Rota de teste
app.get('/test', (req, res) => {
    res.json({ message: 'Servidor est√° funcionando!' });
});



// Nota: O servidor ser√° iniciado ap√≥s a conex√£o com o MongoDB ser estabelecida